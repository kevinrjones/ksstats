/*
 * This file is generated by jOOQ.
 */
package com.ksstats.db.tables


import com.ksstats.db.DefaultSchema
import com.ksstats.db.indexes.PLAYERS_PLAYERID
import com.ksstats.db.keys.BATTINGDETAILS__FK_BATTINGDETAILS_PK_PLAYERS
import com.ksstats.db.keys.BOWLINGDETAILS__FK_BOWLINGDETAILS_PK_PLAYERS
import com.ksstats.db.keys.FALLOFWICKETS__FK_FALLOFWICKETS_PK_PLAYERS
import com.ksstats.db.keys.FIELDING__FK_FIELDING_PK_PLAYERS
import com.ksstats.db.keys.PARTNERSHIPSPLAYERS__FK_PARTNERSHIPSPLAYERS_PK_PLAYERS
import com.ksstats.db.keys.PLAYERSMATCHES__FK_PLAYERSMATCHES_PK_PLAYERS
import com.ksstats.db.keys.PLAYERSOFTHEMATCHMATCHES__FK_PLAYERSOFTHEMATCHMATCHES_PK_PLAYERS
import com.ksstats.db.keys.PLAYERSTEAMS__FK_PLAYERSTEAMS_PK_PLAYERS
import com.ksstats.db.keys.PLAYERS__PK_PLAYERS
import com.ksstats.db.tables.Battingdetails.BattingdetailsPath
import com.ksstats.db.tables.Bowlingdetails.BowlingdetailsPath
import com.ksstats.db.tables.Fallofwickets.FallofwicketsPath
import com.ksstats.db.tables.Fielding.FieldingPath
import com.ksstats.db.tables.Partnershipsplayers.PartnershipsplayersPath
import com.ksstats.db.tables.Playersmatches.PlayersmatchesPath
import com.ksstats.db.tables.Playersofthematchmatches.PlayersofthematchmatchesPath
import com.ksstats.db.tables.Playersteams.PlayersteamsPath
import com.ksstats.db.tables.records.PlayersRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Players(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PlayersRecord>?,
    parentPath: InverseForeignKey<out Record, PlayersRecord>?,
    aliased: Table<PlayersRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PlayersRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>Players</code>
         */
        val PLAYERS: Players = Players()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PlayersRecord> = PlayersRecord::class.java

    /**
     * The column <code>Players.Id</code>.
     */
    val ID: TableField<PlayersRecord, Int?> = createField(DSL.name("Id"), SQLDataType.INTEGER.identity(true), this, "")

    /**
     * The column <code>Players.PlayerId</code>.
     */
    val PLAYERID: TableField<PlayersRecord, Int?> = createField(DSL.name("PlayerId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>Players.FullName</code>.
     */
    val FULLNAME: TableField<PlayersRecord, String?> = createField(DSL.name("FullName"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>Players.SortNamePart</code>.
     */
    val SORTNAMEPART: TableField<PlayersRecord, String?> = createField(DSL.name("SortNamePart"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>Players.OtherNamePart</code>.
     */
    val OTHERNAMEPART: TableField<PlayersRecord, String?> = createField(DSL.name("OtherNamePart"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>Players.NameChanged</code>.
     */
    val NAMECHANGED: TableField<PlayersRecord, Long?> = createField(DSL.name("NameChanged"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>Players.Debut</code>.
     */
    val DEBUT: TableField<PlayersRecord, Long?> = createField(DSL.name("Debut"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>Players.ActiveUntil</code>.
     */
    val ACTIVEUNTIL: TableField<PlayersRecord, Long?> = createField(DSL.name("ActiveUntil"), SQLDataType.BIGINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<PlayersRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PlayersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PlayersRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>Players</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>Players</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>Players</code> table reference
     */
    constructor(): this(DSL.name("Players"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, PlayersRecord>?, parentPath: InverseForeignKey<out Record, PlayersRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, PLAYERS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class PlayersPath : Players, Path<PlayersRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, PlayersRecord>?, parentPath: InverseForeignKey<out Record, PlayersRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<PlayersRecord>): super(alias, aliased)
        override fun `as`(alias: String): PlayersPath = PlayersPath(DSL.name(alias), this)
        override fun `as`(alias: Name): PlayersPath = PlayersPath(alias, this)
        override fun `as`(alias: Table<*>): PlayersPath = PlayersPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(PLAYERS_PLAYERID)
    override fun getIdentity(): Identity<PlayersRecord, Int?> = super.getIdentity() as Identity<PlayersRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<PlayersRecord> = PLAYERS__PK_PLAYERS

    private lateinit var _battingdetails: BattingdetailsPath

    /**
     * Get the implicit to-many join path to the <code>BattingDetails</code>
     * table
     */
    fun battingdetails(): BattingdetailsPath {
        if (!this::_battingdetails.isInitialized)
            _battingdetails = BattingdetailsPath(this, null, BATTINGDETAILS__FK_BATTINGDETAILS_PK_PLAYERS.inverseKey)

        return _battingdetails;
    }

    val battingdetails: BattingdetailsPath
        get(): BattingdetailsPath = battingdetails()

    private lateinit var _bowlingdetails: BowlingdetailsPath

    /**
     * Get the implicit to-many join path to the <code>BowlingDetails</code>
     * table
     */
    fun bowlingdetails(): BowlingdetailsPath {
        if (!this::_bowlingdetails.isInitialized)
            _bowlingdetails = BowlingdetailsPath(this, null, BOWLINGDETAILS__FK_BOWLINGDETAILS_PK_PLAYERS.inverseKey)

        return _bowlingdetails;
    }

    val bowlingdetails: BowlingdetailsPath
        get(): BowlingdetailsPath = bowlingdetails()

    private lateinit var _fallofwickets: FallofwicketsPath

    /**
     * Get the implicit to-many join path to the <code>FallOfWickets</code>
     * table
     */
    fun fallofwickets(): FallofwicketsPath {
        if (!this::_fallofwickets.isInitialized)
            _fallofwickets = FallofwicketsPath(this, null, FALLOFWICKETS__FK_FALLOFWICKETS_PK_PLAYERS.inverseKey)

        return _fallofwickets;
    }

    val fallofwickets: FallofwicketsPath
        get(): FallofwicketsPath = fallofwickets()

    private lateinit var _fielding: FieldingPath

    /**
     * Get the implicit to-many join path to the <code>Fielding</code> table
     */
    fun fielding(): FieldingPath {
        if (!this::_fielding.isInitialized)
            _fielding = FieldingPath(this, null, FIELDING__FK_FIELDING_PK_PLAYERS.inverseKey)

        return _fielding;
    }

    val fielding: FieldingPath
        get(): FieldingPath = fielding()

    private lateinit var _partnershipsplayers: PartnershipsplayersPath

    /**
     * Get the implicit to-many join path to the
     * <code>PartnershipsPlayers</code> table
     */
    fun partnershipsplayers(): PartnershipsplayersPath {
        if (!this::_partnershipsplayers.isInitialized)
            _partnershipsplayers = PartnershipsplayersPath(this, null, PARTNERSHIPSPLAYERS__FK_PARTNERSHIPSPLAYERS_PK_PLAYERS.inverseKey)

        return _partnershipsplayers;
    }

    val partnershipsplayers: PartnershipsplayersPath
        get(): PartnershipsplayersPath = partnershipsplayers()

    private lateinit var _playersmatches: PlayersmatchesPath

    /**
     * Get the implicit to-many join path to the <code>PlayersMatches</code>
     * table
     */
    fun playersmatches(): PlayersmatchesPath {
        if (!this::_playersmatches.isInitialized)
            _playersmatches = PlayersmatchesPath(this, null, PLAYERSMATCHES__FK_PLAYERSMATCHES_PK_PLAYERS.inverseKey)

        return _playersmatches;
    }

    val playersmatches: PlayersmatchesPath
        get(): PlayersmatchesPath = playersmatches()

    private lateinit var _playersofthematchmatches: PlayersofthematchmatchesPath

    /**
     * Get the implicit to-many join path to the
     * <code>PlayersOfTheMatchMatches</code> table
     */
    fun playersofthematchmatches(): PlayersofthematchmatchesPath {
        if (!this::_playersofthematchmatches.isInitialized)
            _playersofthematchmatches = PlayersofthematchmatchesPath(this, null, PLAYERSOFTHEMATCHMATCHES__FK_PLAYERSOFTHEMATCHMATCHES_PK_PLAYERS.inverseKey)

        return _playersofthematchmatches;
    }

    val playersofthematchmatches: PlayersofthematchmatchesPath
        get(): PlayersofthematchmatchesPath = playersofthematchmatches()

    private lateinit var _playersteams: PlayersteamsPath

    /**
     * Get the implicit to-many join path to the <code>PlayersTeams</code> table
     */
    fun playersteams(): PlayersteamsPath {
        if (!this::_playersteams.isInitialized)
            _playersteams = PlayersteamsPath(this, null, PLAYERSTEAMS__FK_PLAYERSTEAMS_PK_PLAYERS.inverseKey)

        return _playersteams;
    }

    val playersteams: PlayersteamsPath
        get(): PlayersteamsPath = playersteams()
    override fun `as`(alias: String): Players = Players(DSL.name(alias), this)
    override fun `as`(alias: Name): Players = Players(alias, this)
    override fun `as`(alias: Table<*>): Players = Players(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Players = Players(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Players = Players(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Players = Players(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Players = Players(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Players = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Players = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Players = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Players = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Players = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Players = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Players = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Players = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Players = where(DSL.notExists(select))
}
