/*
 * This file is generated by jOOQ.
 */
package com.ksstats.db.tables


import com.ksstats.db.DefaultSchema
import com.ksstats.db.indexes.TEAMS_TEAMID
import com.ksstats.db.keys.BATTINGDETAILS__FK_BATTINGDETAILS_PK_TEAMS
import com.ksstats.db.keys.BOWLINGDETAILS__FK_BOWLINGDETAILS_PK_TEAMS
import com.ksstats.db.keys.EXTRAMATCHDETAILS__FK_EXTRAMATCHDETAILS_PK_TEAMS
import com.ksstats.db.keys.FALLOFWICKETS__FK_FALLOFWICKETS_PK_TEAMS
import com.ksstats.db.keys.FIELDING__FK_FIELDING_PK_TEAMS
import com.ksstats.db.keys.INNINGS__FK_INNINGS_PK_TEAMS
import com.ksstats.db.keys.MATCHES__FK_MATCHES_PK_TEAMS
import com.ksstats.db.keys.PARTNERSHIPS__FK_PARTNERSHIPS_PK_TEAMS
import com.ksstats.db.keys.PLAYERSTEAMS__FK_PLAYERSTEAMS_PK_TEAMS
import com.ksstats.db.keys.TEAMSMATCHTYPES__FK_TEAMSMATCHTYPES_PK_TEAMS
import com.ksstats.db.keys.TEAMS__PK_TEAMS
import com.ksstats.db.tables.Battingdetails.BattingdetailsPath
import com.ksstats.db.tables.Bowlingdetails.BowlingdetailsPath
import com.ksstats.db.tables.Extramatchdetails.ExtramatchdetailsPath
import com.ksstats.db.tables.Fallofwickets.FallofwicketsPath
import com.ksstats.db.tables.Fielding.FieldingPath
import com.ksstats.db.tables.Innings.InningsPath
import com.ksstats.db.tables.Matches.MatchesPath
import com.ksstats.db.tables.Partnerships.PartnershipsPath
import com.ksstats.db.tables.Playersteams.PlayersteamsPath
import com.ksstats.db.tables.Teamsmatchtypes.TeamsmatchtypesPath
import com.ksstats.db.tables.records.TeamsRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Teams(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, TeamsRecord>?,
    parentPath: InverseForeignKey<out Record, TeamsRecord>?,
    aliased: Table<TeamsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<TeamsRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>Teams</code>
         */
        val TEAMS: Teams = Teams()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TeamsRecord> = TeamsRecord::class.java

    /**
     * The column <code>Teams.Id</code>.
     */
    val ID: TableField<TeamsRecord, Int?> = createField(DSL.name("Id"), SQLDataType.INTEGER.identity(true), this, "")

    /**
     * The column <code>Teams.Name</code>.
     */
    val NAME: TableField<TeamsRecord, String?> = createField(DSL.name("Name"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>Teams.TeamId</code>.
     */
    val TEAMID: TableField<TeamsRecord, Int?> = createField(DSL.name("TeamId"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<TeamsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<TeamsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<TeamsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>Teams</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>Teams</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>Teams</code> table reference
     */
    constructor(): this(DSL.name("Teams"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, TeamsRecord>?, parentPath: InverseForeignKey<out Record, TeamsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, TEAMS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class TeamsPath : Teams, Path<TeamsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, TeamsRecord>?, parentPath: InverseForeignKey<out Record, TeamsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<TeamsRecord>): super(alias, aliased)
        override fun `as`(alias: String): TeamsPath = TeamsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): TeamsPath = TeamsPath(alias, this)
        override fun `as`(alias: Table<*>): TeamsPath = TeamsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(TEAMS_TEAMID)
    override fun getIdentity(): Identity<TeamsRecord, Int?> = super.getIdentity() as Identity<TeamsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<TeamsRecord> = TEAMS__PK_TEAMS

    private lateinit var _battingdetails: BattingdetailsPath

    /**
     * Get the implicit to-many join path to the <code>BattingDetails</code>
     * table
     */
    fun battingdetails(): BattingdetailsPath {
        if (!this::_battingdetails.isInitialized)
            _battingdetails = BattingdetailsPath(this, null, BATTINGDETAILS__FK_BATTINGDETAILS_PK_TEAMS.inverseKey)

        return _battingdetails;
    }

    val battingdetails: BattingdetailsPath
        get(): BattingdetailsPath = battingdetails()

    private lateinit var _bowlingdetails: BowlingdetailsPath

    /**
     * Get the implicit to-many join path to the <code>BowlingDetails</code>
     * table
     */
    fun bowlingdetails(): BowlingdetailsPath {
        if (!this::_bowlingdetails.isInitialized)
            _bowlingdetails = BowlingdetailsPath(this, null, BOWLINGDETAILS__FK_BOWLINGDETAILS_PK_TEAMS.inverseKey)

        return _bowlingdetails;
    }

    val bowlingdetails: BowlingdetailsPath
        get(): BowlingdetailsPath = bowlingdetails()

    private lateinit var _extramatchdetails: ExtramatchdetailsPath

    /**
     * Get the implicit to-many join path to the <code>ExtraMatchDetails</code>
     * table
     */
    fun extramatchdetails(): ExtramatchdetailsPath {
        if (!this::_extramatchdetails.isInitialized)
            _extramatchdetails = ExtramatchdetailsPath(this, null, EXTRAMATCHDETAILS__FK_EXTRAMATCHDETAILS_PK_TEAMS.inverseKey)

        return _extramatchdetails;
    }

    val extramatchdetails: ExtramatchdetailsPath
        get(): ExtramatchdetailsPath = extramatchdetails()

    private lateinit var _fallofwickets: FallofwicketsPath

    /**
     * Get the implicit to-many join path to the <code>FallOfWickets</code>
     * table
     */
    fun fallofwickets(): FallofwicketsPath {
        if (!this::_fallofwickets.isInitialized)
            _fallofwickets = FallofwicketsPath(this, null, FALLOFWICKETS__FK_FALLOFWICKETS_PK_TEAMS.inverseKey)

        return _fallofwickets;
    }

    val fallofwickets: FallofwicketsPath
        get(): FallofwicketsPath = fallofwickets()

    private lateinit var _fielding: FieldingPath

    /**
     * Get the implicit to-many join path to the <code>Fielding</code> table
     */
    fun fielding(): FieldingPath {
        if (!this::_fielding.isInitialized)
            _fielding = FieldingPath(this, null, FIELDING__FK_FIELDING_PK_TEAMS.inverseKey)

        return _fielding;
    }

    val fielding: FieldingPath
        get(): FieldingPath = fielding()

    private lateinit var _innings: InningsPath

    /**
     * Get the implicit to-many join path to the <code>Innings</code> table
     */
    fun innings(): InningsPath {
        if (!this::_innings.isInitialized)
            _innings = InningsPath(this, null, INNINGS__FK_INNINGS_PK_TEAMS.inverseKey)

        return _innings;
    }

    val innings: InningsPath
        get(): InningsPath = innings()

    private lateinit var _matches: MatchesPath

    /**
     * Get the implicit to-many join path to the <code>Matches</code> table
     */
    fun matches(): MatchesPath {
        if (!this::_matches.isInitialized)
            _matches = MatchesPath(this, null, MATCHES__FK_MATCHES_PK_TEAMS.inverseKey)

        return _matches;
    }

    val matches: MatchesPath
        get(): MatchesPath = matches()

    private lateinit var _partnerships: PartnershipsPath

    /**
     * Get the implicit to-many join path to the <code>Partnerships</code> table
     */
    fun partnerships(): PartnershipsPath {
        if (!this::_partnerships.isInitialized)
            _partnerships = PartnershipsPath(this, null, PARTNERSHIPS__FK_PARTNERSHIPS_PK_TEAMS.inverseKey)

        return _partnerships;
    }

    val partnerships: PartnershipsPath
        get(): PartnershipsPath = partnerships()

    private lateinit var _playersteams: PlayersteamsPath

    /**
     * Get the implicit to-many join path to the <code>PlayersTeams</code> table
     */
    fun playersteams(): PlayersteamsPath {
        if (!this::_playersteams.isInitialized)
            _playersteams = PlayersteamsPath(this, null, PLAYERSTEAMS__FK_PLAYERSTEAMS_PK_TEAMS.inverseKey)

        return _playersteams;
    }

    val playersteams: PlayersteamsPath
        get(): PlayersteamsPath = playersteams()

    private lateinit var _teamsmatchtypes: TeamsmatchtypesPath

    /**
     * Get the implicit to-many join path to the <code>TeamsMatchTypes</code>
     * table
     */
    fun teamsmatchtypes(): TeamsmatchtypesPath {
        if (!this::_teamsmatchtypes.isInitialized)
            _teamsmatchtypes = TeamsmatchtypesPath(this, null, TEAMSMATCHTYPES__FK_TEAMSMATCHTYPES_PK_TEAMS.inverseKey)

        return _teamsmatchtypes;
    }

    val teamsmatchtypes: TeamsmatchtypesPath
        get(): TeamsmatchtypesPath = teamsmatchtypes()
    override fun `as`(alias: String): Teams = Teams(DSL.name(alias), this)
    override fun `as`(alias: Name): Teams = Teams(alias, this)
    override fun `as`(alias: Table<*>): Teams = Teams(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Teams = Teams(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Teams = Teams(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Teams = Teams(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Teams = Teams(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Teams = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Teams = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Teams = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Teams = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Teams = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Teams = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Teams = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Teams = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Teams = where(DSL.notExists(select))
}
