/*
 * This file is generated by jOOQ.
 */
package com.ksstats.db.tables


import com.ksstats.db.DefaultSchema
import com.ksstats.db.indexes.EXTRAMATCHDETAILS_MATCHID
import com.ksstats.db.indexes.EXTRAMATCHDETAILS_MATCHID_OPPONENTSID
import com.ksstats.db.indexes.EXTRAMATCHDETAILS_MATCHID_TEAMID
import com.ksstats.db.indexes.EXTRAMATCHDETAILS_MATCHID_TEAMID_OPPONENTSID
import com.ksstats.db.indexes.EXTRAMATCHDETAILS_MATCHTYPE
import com.ksstats.db.indexes.EXTRAMATCHDETAILS_OPPONENTSID
import com.ksstats.db.indexes.EXTRAMATCHDETAILS_TEAMID
import com.ksstats.db.keys.EXTRAMATCHDETAILS__FK_EXTRAMATCHDETAILS_PK_MATCHES
import com.ksstats.db.keys.EXTRAMATCHDETAILS__FK_EXTRAMATCHDETAILS_PK_TEAMS
import com.ksstats.db.tables.Matches.MatchesPath
import com.ksstats.db.tables.Teams.TeamsPath
import com.ksstats.db.tables.records.ExtramatchdetailsRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Extramatchdetails(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ExtramatchdetailsRecord>?,
    parentPath: InverseForeignKey<out Record, ExtramatchdetailsRecord>?,
    aliased: Table<ExtramatchdetailsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ExtramatchdetailsRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>ExtraMatchDetails</code>
         */
        val EXTRAMATCHDETAILS: Extramatchdetails = Extramatchdetails()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ExtramatchdetailsRecord> = ExtramatchdetailsRecord::class.java

    /**
     * The column <code>ExtraMatchDetails.MatchId</code>.
     */
    val MATCHID: TableField<ExtramatchdetailsRecord, Int?> = createField(DSL.name("MatchId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>ExtraMatchDetails.TeamId</code>.
     */
    val TEAMID: TableField<ExtramatchdetailsRecord, Int?> = createField(DSL.name("TeamId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>ExtraMatchDetails.OpponentsId</code>.
     */
    val OPPONENTSID: TableField<ExtramatchdetailsRecord, Int?> = createField(DSL.name("OpponentsId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>ExtraMatchDetails.MatchType</code>.
     */
    val MATCHTYPE: TableField<ExtramatchdetailsRecord, String?> = createField(DSL.name("MatchType"), SQLDataType.VARCHAR(5).nullable(false), this, "")

    /**
     * The column <code>ExtraMatchDetails.Result</code>.
     */
    val RESULT: TableField<ExtramatchdetailsRecord, Int?> = createField(DSL.name("Result"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>ExtraMatchDetails.HomeAway</code>.
     */
    val HOMEAWAY: TableField<ExtramatchdetailsRecord, Int?> = createField(DSL.name("HomeAway"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ExtramatchdetailsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ExtramatchdetailsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ExtramatchdetailsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>ExtraMatchDetails</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>ExtraMatchDetails</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>ExtraMatchDetails</code> table reference
     */
    constructor(): this(DSL.name("ExtraMatchDetails"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ExtramatchdetailsRecord>?, parentPath: InverseForeignKey<out Record, ExtramatchdetailsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, EXTRAMATCHDETAILS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ExtramatchdetailsPath : Extramatchdetails, Path<ExtramatchdetailsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ExtramatchdetailsRecord>?, parentPath: InverseForeignKey<out Record, ExtramatchdetailsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<ExtramatchdetailsRecord>): super(alias, aliased)
        override fun `as`(alias: String): ExtramatchdetailsPath = ExtramatchdetailsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ExtramatchdetailsPath = ExtramatchdetailsPath(alias, this)
        override fun `as`(alias: Table<*>): ExtramatchdetailsPath = ExtramatchdetailsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(EXTRAMATCHDETAILS_MATCHID, EXTRAMATCHDETAILS_MATCHID_OPPONENTSID, EXTRAMATCHDETAILS_MATCHID_TEAMID, EXTRAMATCHDETAILS_MATCHID_TEAMID_OPPONENTSID, EXTRAMATCHDETAILS_MATCHTYPE, EXTRAMATCHDETAILS_OPPONENTSID, EXTRAMATCHDETAILS_TEAMID)
    override fun getReferences(): List<ForeignKey<ExtramatchdetailsRecord, *>> = listOf(EXTRAMATCHDETAILS__FK_EXTRAMATCHDETAILS_PK_MATCHES, EXTRAMATCHDETAILS__FK_EXTRAMATCHDETAILS_PK_TEAMS)

    private lateinit var _matches: MatchesPath

    /**
     * Get the implicit join path to the <code>Matches</code> table.
     */
    fun matches(): MatchesPath {
        if (!this::_matches.isInitialized)
            _matches = MatchesPath(this, EXTRAMATCHDETAILS__FK_EXTRAMATCHDETAILS_PK_MATCHES, null)

        return _matches;
    }

    val matches: MatchesPath
        get(): MatchesPath = matches()

    private lateinit var _teams: TeamsPath

    /**
     * Get the implicit join path to the <code>Teams</code> table.
     */
    fun teams(): TeamsPath {
        if (!this::_teams.isInitialized)
            _teams = TeamsPath(this, EXTRAMATCHDETAILS__FK_EXTRAMATCHDETAILS_PK_TEAMS, null)

        return _teams;
    }

    val teams: TeamsPath
        get(): TeamsPath = teams()
    override fun `as`(alias: String): Extramatchdetails = Extramatchdetails(DSL.name(alias), this)
    override fun `as`(alias: Name): Extramatchdetails = Extramatchdetails(alias, this)
    override fun `as`(alias: Table<*>): Extramatchdetails = Extramatchdetails(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Extramatchdetails = Extramatchdetails(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Extramatchdetails = Extramatchdetails(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Extramatchdetails = Extramatchdetails(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Extramatchdetails = Extramatchdetails(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Extramatchdetails = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Extramatchdetails = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Extramatchdetails = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Extramatchdetails = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Extramatchdetails = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Extramatchdetails = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Extramatchdetails = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Extramatchdetails = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Extramatchdetails = where(DSL.notExists(select))
}
