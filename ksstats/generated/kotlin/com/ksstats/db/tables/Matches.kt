/*
 * This file is generated by jOOQ.
 */
package com.ksstats.db.tables


import com.ksstats.db.DefaultSchema
import com.ksstats.db.indexes.MATCHES_MATCHTYPE
import com.ksstats.db.keys.BATTINGDETAILS__FK_BATTINGDETAILS_PK_MATCHES
import com.ksstats.db.keys.BOWLINGDETAILS__FK_BOWLINGDETAILS_PK_MATCHES
import com.ksstats.db.keys.CLOSEOFPLAY__FK_CLOSEOFPLAY_PK_MATCHES
import com.ksstats.db.keys.EXTRAMATCHDETAILS__FK_EXTRAMATCHDETAILS_PK_MATCHES
import com.ksstats.db.keys.FALLOFWICKETS__FK_FALLOFWICKETS_PK_MATCHES
import com.ksstats.db.keys.FIELDING__FK_FIELDING_PK_MATCHES
import com.ksstats.db.keys.INNINGS__FK_INNINGS_PK_MATCHES
import com.ksstats.db.keys.MATCHES__FK_MATCHES_PK_GROUNDS
import com.ksstats.db.keys.MATCHES__FK_MATCHES_PK_TEAMS
import com.ksstats.db.keys.MATCHES__PK_MATCHES
import com.ksstats.db.keys.MATCHREFEREESMATCHES__FK_MATCHREFEREESMATCHES_PK_MATCHES
import com.ksstats.db.keys.MATCHSUBTYPE__FK_MATCHSUBTYPE_PK_MATCHES
import com.ksstats.db.keys.NOTES__FK_NOTES_PK_MATCHES
import com.ksstats.db.keys.PARTNERSHIPS__FK_PARTNERSHIPS_PK_MATCHES
import com.ksstats.db.keys.PLAYERSMATCHES__FK_PLAYERSMATCHES_PK_MATCHES
import com.ksstats.db.keys.PLAYERSOFTHEMATCHMATCHES__FK_PLAYERSOFTHEMATCHMATCHES_PK_MATCHES
import com.ksstats.db.keys.PLAYERSTEAMS__FK_PLAYERSTEAMS_PK_MATCHES
import com.ksstats.db.keys.RESERVEUMPIRESMATCHES__FK_RESERVEUMPIRESMATCHES_PK_MATCHES
import com.ksstats.db.keys.SCORERSMATCHES__FK_SCORERSMATCHES_PK_MATCHES
import com.ksstats.db.keys.TVUMPIRESMATCHES__FK_TVUMPIRESMATCHES_PK_MATCHES
import com.ksstats.db.keys.UMPIRESMATCHES__FK_UMPIRESMATCHES_PK_MATCHES
import com.ksstats.db.tables.Battingdetails.BattingdetailsPath
import com.ksstats.db.tables.Bowlingdetails.BowlingdetailsPath
import com.ksstats.db.tables.Closeofplay.CloseofplayPath
import com.ksstats.db.tables.Extramatchdetails.ExtramatchdetailsPath
import com.ksstats.db.tables.Fallofwickets.FallofwicketsPath
import com.ksstats.db.tables.Fielding.FieldingPath
import com.ksstats.db.tables.Grounds.GroundsPath
import com.ksstats.db.tables.Innings.InningsPath
import com.ksstats.db.tables.Matchrefereesmatches.MatchrefereesmatchesPath
import com.ksstats.db.tables.Matchsubtype.MatchsubtypePath
import com.ksstats.db.tables.Notes.NotesPath
import com.ksstats.db.tables.Partnerships.PartnershipsPath
import com.ksstats.db.tables.Playersmatches.PlayersmatchesPath
import com.ksstats.db.tables.Playersofthematchmatches.PlayersofthematchmatchesPath
import com.ksstats.db.tables.Playersteams.PlayersteamsPath
import com.ksstats.db.tables.Reserveumpiresmatches.ReserveumpiresmatchesPath
import com.ksstats.db.tables.Scorersmatches.ScorersmatchesPath
import com.ksstats.db.tables.Teams.TeamsPath
import com.ksstats.db.tables.Tvumpiresmatches.TvumpiresmatchesPath
import com.ksstats.db.tables.Umpiresmatches.UmpiresmatchesPath
import com.ksstats.db.tables.records.MatchesRecord

import java.time.LocalDate
import java.time.LocalDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Matches(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, MatchesRecord>?,
    parentPath: InverseForeignKey<out Record, MatchesRecord>?,
    aliased: Table<MatchesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<MatchesRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>Matches</code>
         */
        val MATCHES: Matches = Matches()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<MatchesRecord> = MatchesRecord::class.java

    /**
     * The column <code>Matches.Id</code>.
     */
    val ID: TableField<MatchesRecord, Int?> = createField(DSL.name("Id"), SQLDataType.INTEGER.identity(true), this, "")

    /**
     * The column <code>Matches.CaId</code>.
     */
    val CAID: TableField<MatchesRecord, String?> = createField(DSL.name("CaId"), SQLDataType.VARCHAR(20).nullable(false), this, "")

    /**
     * The column <code>Matches.CaUrl</code>.
     */
    val CAURL: TableField<MatchesRecord, String?> = createField(DSL.name("CaUrl"), SQLDataType.VARCHAR(120).nullable(false), this, "")

    /**
     * The column <code>Matches.FileName</code>.
     */
    val FILENAME: TableField<MatchesRecord, String?> = createField(DSL.name("FileName"), SQLDataType.VARCHAR(120).nullable(false), this, "")

    /**
     * The column <code>Matches.MatchInSeries</code>.
     */
    val MATCHINSERIES: TableField<MatchesRecord, Int?> = createField(DSL.name("MatchInSeries"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>Matches.SeriesNumber</code>.
     */
    val SERIESNUMBER: TableField<MatchesRecord, Int?> = createField(DSL.name("SeriesNumber"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>Matches.MatchType</code>.
     */
    val MATCHTYPE: TableField<MatchesRecord, String?> = createField(DSL.name("MatchType"), SQLDataType.VARCHAR(5).nullable(false), this, "")

    /**
     * The column <code>Matches.HomeTeamId</code>.
     */
    val HOMETEAMID: TableField<MatchesRecord, Int?> = createField(DSL.name("HomeTeamId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>Matches.HomeTeamName</code>.
     */
    val HOMETEAMNAME: TableField<MatchesRecord, String?> = createField(DSL.name("HomeTeamName"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>Matches.AwayTeamId</code>.
     */
    val AWAYTEAMID: TableField<MatchesRecord, Int?> = createField(DSL.name("AwayTeamId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>Matches.AwayTeamName</code>.
     */
    val AWAYTEAMNAME: TableField<MatchesRecord, String?> = createField(DSL.name("AwayTeamName"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>Matches.IsNeutral</code>.
     */
    val ISNEUTRAL: TableField<MatchesRecord, Boolean?> = createField(DSL.name("IsNeutral"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>Matches.MatchDesignator</code>.
     */
    val MATCHDESIGNATOR: TableField<MatchesRecord, String?> = createField(DSL.name("MatchDesignator"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>Matches.MatchTitle</code>.
     */
    val MATCHTITLE: TableField<MatchesRecord, String?> = createField(DSL.name("MatchTitle"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>Matches.Tournament</code>.
     */
    val TOURNAMENT: TableField<MatchesRecord, String?> = createField(DSL.name("Tournament"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>Matches.Location</code>.
     */
    val LOCATION: TableField<MatchesRecord, String?> = createField(DSL.name("Location"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>Matches.LocationId</code>.
     */
    val LOCATIONID: TableField<MatchesRecord, Int?> = createField(DSL.name("LocationId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>Matches.GroundNameId</code>.
     */
    val GROUNDNAMEID: TableField<MatchesRecord, Int?> = createField(DSL.name("GroundNameId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>Matches.TossTeamId</code>.
     */
    val TOSSTEAMID: TableField<MatchesRecord, Int?> = createField(DSL.name("TossTeamId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>Matches.MatchDate</code>.
     */
    val MATCHDATE: TableField<MatchesRecord, String?> = createField(DSL.name("MatchDate"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>Matches.SeriesDate</code>.
     */
    val SERIESDATE: TableField<MatchesRecord, String?> = createField(DSL.name("SeriesDate"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>Matches.MatchStartYear</code>.
     */
    val MATCHSTARTYEAR: TableField<MatchesRecord, String?> = createField(DSL.name("MatchStartYear"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>Matches.MatchStartDate</code>.
     */
    val MATCHSTARTDATE: TableField<MatchesRecord, LocalDate?> = createField(DSL.name("MatchStartDate"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>Matches.MatchStartDateAsOffset</code>.
     */
    val MATCHSTARTDATEASOFFSET: TableField<MatchesRecord, Long?> = createField(DSL.name("MatchStartDateAsOffset"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>Matches.ResultString</code>.
     */
    val RESULTSTRING: TableField<MatchesRecord, String?> = createField(DSL.name("ResultString"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>Matches.HomeCountryId</code>.
     */
    val HOMECOUNTRYID: TableField<MatchesRecord, Int?> = createField(DSL.name("HomeCountryId"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>Matches.WhoWonId</code>.
     */
    val WHOWONID: TableField<MatchesRecord, Int?> = createField(DSL.name("WhoWonId"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>Matches.WhoLostId</code>.
     */
    val WHOLOSTID: TableField<MatchesRecord, Int?> = createField(DSL.name("WhoLostId"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>Matches.HowMuch</code>.
     */
    val HOWMUCH: TableField<MatchesRecord, Int?> = createField(DSL.name("HowMuch"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>Matches.MarginForSort</code>.
     */
    val MARGINFORSORT: TableField<MatchesRecord, Int?> = createField(DSL.name("MarginForSort"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>Matches.VictoryType</code>.
     */
    val VICTORYTYPE: TableField<MatchesRecord, Int?> = createField(DSL.name("VictoryType"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>Matches.Duration</code>.
     */
    val DURATION: TableField<MatchesRecord, Int?> = createField(DSL.name("Duration"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>Matches.BallsPerOver</code>.
     */
    val BALLSPEROVER: TableField<MatchesRecord, Int?> = createField(DSL.name("BallsPerOver"), SQLDataType.INTEGER.nullable(false), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val DAYNIGHT: TableField<MatchesRecord, Any?> = createField(DSL.name("DayNight"), org.jooq.impl.SQLDataType.OTHER.nullable(false), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val OVERSREDUCED: TableField<MatchesRecord, Any?> = createField(DSL.name("OversReduced"), org.jooq.impl.SQLDataType.OTHER.nullable(false), this, "")

    /**
     * The column <code>Matches.AddedDate</code>.
     */
    val ADDEDDATE: TableField<MatchesRecord, LocalDateTime?> = createField(DSL.name("AddedDate"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "")

    /**
     * The column <code>Matches.AddedDateAsOffset</code>.
     */
    val ADDEDDATEASOFFSET: TableField<MatchesRecord, Long?> = createField(DSL.name("AddedDateAsOffset"), SQLDataType.BIGINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<MatchesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<MatchesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<MatchesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>Matches</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>Matches</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>Matches</code> table reference
     */
    constructor(): this(DSL.name("Matches"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, MatchesRecord>?, parentPath: InverseForeignKey<out Record, MatchesRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, MATCHES, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class MatchesPath : Matches, Path<MatchesRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, MatchesRecord>?, parentPath: InverseForeignKey<out Record, MatchesRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<MatchesRecord>): super(alias, aliased)
        override fun `as`(alias: String): MatchesPath = MatchesPath(DSL.name(alias), this)
        override fun `as`(alias: Name): MatchesPath = MatchesPath(alias, this)
        override fun `as`(alias: Table<*>): MatchesPath = MatchesPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(MATCHES_MATCHTYPE)
    override fun getIdentity(): Identity<MatchesRecord, Int?> = super.getIdentity() as Identity<MatchesRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<MatchesRecord> = MATCHES__PK_MATCHES
    override fun getReferences(): List<ForeignKey<MatchesRecord, *>> = listOf(MATCHES__FK_MATCHES_PK_TEAMS, MATCHES__FK_MATCHES_PK_GROUNDS)

    private lateinit var _teams: TeamsPath

    /**
     * Get the implicit join path to the <code>Teams</code> table.
     */
    fun teams(): TeamsPath {
        if (!this::_teams.isInitialized)
            _teams = TeamsPath(this, MATCHES__FK_MATCHES_PK_TEAMS, null)

        return _teams;
    }

    val teams: TeamsPath
        get(): TeamsPath = teams()

    private lateinit var _grounds: GroundsPath

    /**
     * Get the implicit join path to the <code>Grounds</code> table.
     */
    fun grounds(): GroundsPath {
        if (!this::_grounds.isInitialized)
            _grounds = GroundsPath(this, MATCHES__FK_MATCHES_PK_GROUNDS, null)

        return _grounds;
    }

    val grounds: GroundsPath
        get(): GroundsPath = grounds()

    private lateinit var _battingdetails: BattingdetailsPath

    /**
     * Get the implicit to-many join path to the <code>BattingDetails</code>
     * table
     */
    fun battingdetails(): BattingdetailsPath {
        if (!this::_battingdetails.isInitialized)
            _battingdetails = BattingdetailsPath(this, null, BATTINGDETAILS__FK_BATTINGDETAILS_PK_MATCHES.inverseKey)

        return _battingdetails;
    }

    val battingdetails: BattingdetailsPath
        get(): BattingdetailsPath = battingdetails()

    private lateinit var _bowlingdetails: BowlingdetailsPath

    /**
     * Get the implicit to-many join path to the <code>BowlingDetails</code>
     * table
     */
    fun bowlingdetails(): BowlingdetailsPath {
        if (!this::_bowlingdetails.isInitialized)
            _bowlingdetails = BowlingdetailsPath(this, null, BOWLINGDETAILS__FK_BOWLINGDETAILS_PK_MATCHES.inverseKey)

        return _bowlingdetails;
    }

    val bowlingdetails: BowlingdetailsPath
        get(): BowlingdetailsPath = bowlingdetails()

    private lateinit var _closeofplay: CloseofplayPath

    /**
     * Get the implicit to-many join path to the <code>CloseOfPlay</code> table
     */
    fun closeofplay(): CloseofplayPath {
        if (!this::_closeofplay.isInitialized)
            _closeofplay = CloseofplayPath(this, null, CLOSEOFPLAY__FK_CLOSEOFPLAY_PK_MATCHES.inverseKey)

        return _closeofplay;
    }

    val closeofplay: CloseofplayPath
        get(): CloseofplayPath = closeofplay()

    private lateinit var _extramatchdetails: ExtramatchdetailsPath

    /**
     * Get the implicit to-many join path to the <code>ExtraMatchDetails</code>
     * table
     */
    fun extramatchdetails(): ExtramatchdetailsPath {
        if (!this::_extramatchdetails.isInitialized)
            _extramatchdetails = ExtramatchdetailsPath(this, null, EXTRAMATCHDETAILS__FK_EXTRAMATCHDETAILS_PK_MATCHES.inverseKey)

        return _extramatchdetails;
    }

    val extramatchdetails: ExtramatchdetailsPath
        get(): ExtramatchdetailsPath = extramatchdetails()

    private lateinit var _fallofwickets: FallofwicketsPath

    /**
     * Get the implicit to-many join path to the <code>FallOfWickets</code>
     * table
     */
    fun fallofwickets(): FallofwicketsPath {
        if (!this::_fallofwickets.isInitialized)
            _fallofwickets = FallofwicketsPath(this, null, FALLOFWICKETS__FK_FALLOFWICKETS_PK_MATCHES.inverseKey)

        return _fallofwickets;
    }

    val fallofwickets: FallofwicketsPath
        get(): FallofwicketsPath = fallofwickets()

    private lateinit var _fielding: FieldingPath

    /**
     * Get the implicit to-many join path to the <code>Fielding</code> table
     */
    fun fielding(): FieldingPath {
        if (!this::_fielding.isInitialized)
            _fielding = FieldingPath(this, null, FIELDING__FK_FIELDING_PK_MATCHES.inverseKey)

        return _fielding;
    }

    val fielding: FieldingPath
        get(): FieldingPath = fielding()

    private lateinit var _innings: InningsPath

    /**
     * Get the implicit to-many join path to the <code>Innings</code> table
     */
    fun innings(): InningsPath {
        if (!this::_innings.isInitialized)
            _innings = InningsPath(this, null, INNINGS__FK_INNINGS_PK_MATCHES.inverseKey)

        return _innings;
    }

    val innings: InningsPath
        get(): InningsPath = innings()

    private lateinit var _matchrefereesmatches: MatchrefereesmatchesPath

    /**
     * Get the implicit to-many join path to the
     * <code>MatchRefereesMatches</code> table
     */
    fun matchrefereesmatches(): MatchrefereesmatchesPath {
        if (!this::_matchrefereesmatches.isInitialized)
            _matchrefereesmatches = MatchrefereesmatchesPath(this, null, MATCHREFEREESMATCHES__FK_MATCHREFEREESMATCHES_PK_MATCHES.inverseKey)

        return _matchrefereesmatches;
    }

    val matchrefereesmatches: MatchrefereesmatchesPath
        get(): MatchrefereesmatchesPath = matchrefereesmatches()

    private lateinit var _matchsubtype: MatchsubtypePath

    /**
     * Get the implicit to-many join path to the <code>MatchSubType</code> table
     */
    fun matchsubtype(): MatchsubtypePath {
        if (!this::_matchsubtype.isInitialized)
            _matchsubtype = MatchsubtypePath(this, null, MATCHSUBTYPE__FK_MATCHSUBTYPE_PK_MATCHES.inverseKey)

        return _matchsubtype;
    }

    val matchsubtype: MatchsubtypePath
        get(): MatchsubtypePath = matchsubtype()

    private lateinit var _notes: NotesPath

    /**
     * Get the implicit to-many join path to the <code>Notes</code> table
     */
    fun notes(): NotesPath {
        if (!this::_notes.isInitialized)
            _notes = NotesPath(this, null, NOTES__FK_NOTES_PK_MATCHES.inverseKey)

        return _notes;
    }

    val notes: NotesPath
        get(): NotesPath = notes()

    private lateinit var _partnerships: PartnershipsPath

    /**
     * Get the implicit to-many join path to the <code>Partnerships</code> table
     */
    fun partnerships(): PartnershipsPath {
        if (!this::_partnerships.isInitialized)
            _partnerships = PartnershipsPath(this, null, PARTNERSHIPS__FK_PARTNERSHIPS_PK_MATCHES.inverseKey)

        return _partnerships;
    }

    val partnerships: PartnershipsPath
        get(): PartnershipsPath = partnerships()

    private lateinit var _playersmatches: PlayersmatchesPath

    /**
     * Get the implicit to-many join path to the <code>PlayersMatches</code>
     * table
     */
    fun playersmatches(): PlayersmatchesPath {
        if (!this::_playersmatches.isInitialized)
            _playersmatches = PlayersmatchesPath(this, null, PLAYERSMATCHES__FK_PLAYERSMATCHES_PK_MATCHES.inverseKey)

        return _playersmatches;
    }

    val playersmatches: PlayersmatchesPath
        get(): PlayersmatchesPath = playersmatches()

    private lateinit var _playersofthematchmatches: PlayersofthematchmatchesPath

    /**
     * Get the implicit to-many join path to the
     * <code>PlayersOfTheMatchMatches</code> table
     */
    fun playersofthematchmatches(): PlayersofthematchmatchesPath {
        if (!this::_playersofthematchmatches.isInitialized)
            _playersofthematchmatches = PlayersofthematchmatchesPath(this, null, PLAYERSOFTHEMATCHMATCHES__FK_PLAYERSOFTHEMATCHMATCHES_PK_MATCHES.inverseKey)

        return _playersofthematchmatches;
    }

    val playersofthematchmatches: PlayersofthematchmatchesPath
        get(): PlayersofthematchmatchesPath = playersofthematchmatches()

    private lateinit var _playersteams: PlayersteamsPath

    /**
     * Get the implicit to-many join path to the <code>PlayersTeams</code> table
     */
    fun playersteams(): PlayersteamsPath {
        if (!this::_playersteams.isInitialized)
            _playersteams = PlayersteamsPath(this, null, PLAYERSTEAMS__FK_PLAYERSTEAMS_PK_MATCHES.inverseKey)

        return _playersteams;
    }

    val playersteams: PlayersteamsPath
        get(): PlayersteamsPath = playersteams()

    private lateinit var _reserveumpiresmatches: ReserveumpiresmatchesPath

    /**
     * Get the implicit to-many join path to the
     * <code>ReserveUmpiresMatches</code> table
     */
    fun reserveumpiresmatches(): ReserveumpiresmatchesPath {
        if (!this::_reserveumpiresmatches.isInitialized)
            _reserveumpiresmatches = ReserveumpiresmatchesPath(this, null, RESERVEUMPIRESMATCHES__FK_RESERVEUMPIRESMATCHES_PK_MATCHES.inverseKey)

        return _reserveumpiresmatches;
    }

    val reserveumpiresmatches: ReserveumpiresmatchesPath
        get(): ReserveumpiresmatchesPath = reserveumpiresmatches()

    private lateinit var _scorersmatches: ScorersmatchesPath

    /**
     * Get the implicit to-many join path to the <code>ScorersMatches</code>
     * table
     */
    fun scorersmatches(): ScorersmatchesPath {
        if (!this::_scorersmatches.isInitialized)
            _scorersmatches = ScorersmatchesPath(this, null, SCORERSMATCHES__FK_SCORERSMATCHES_PK_MATCHES.inverseKey)

        return _scorersmatches;
    }

    val scorersmatches: ScorersmatchesPath
        get(): ScorersmatchesPath = scorersmatches()

    private lateinit var _tvumpiresmatches: TvumpiresmatchesPath

    /**
     * Get the implicit to-many join path to the <code>TvUmpiresMatches</code>
     * table
     */
    fun tvumpiresmatches(): TvumpiresmatchesPath {
        if (!this::_tvumpiresmatches.isInitialized)
            _tvumpiresmatches = TvumpiresmatchesPath(this, null, TVUMPIRESMATCHES__FK_TVUMPIRESMATCHES_PK_MATCHES.inverseKey)

        return _tvumpiresmatches;
    }

    val tvumpiresmatches: TvumpiresmatchesPath
        get(): TvumpiresmatchesPath = tvumpiresmatches()

    private lateinit var _umpiresmatches: UmpiresmatchesPath

    /**
     * Get the implicit to-many join path to the <code>UmpiresMatches</code>
     * table
     */
    fun umpiresmatches(): UmpiresmatchesPath {
        if (!this::_umpiresmatches.isInitialized)
            _umpiresmatches = UmpiresmatchesPath(this, null, UMPIRESMATCHES__FK_UMPIRESMATCHES_PK_MATCHES.inverseKey)

        return _umpiresmatches;
    }

    val umpiresmatches: UmpiresmatchesPath
        get(): UmpiresmatchesPath = umpiresmatches()
    override fun `as`(alias: String): Matches = Matches(DSL.name(alias), this)
    override fun `as`(alias: Name): Matches = Matches(alias, this)
    override fun `as`(alias: Table<*>): Matches = Matches(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Matches = Matches(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Matches = Matches(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Matches = Matches(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Matches = Matches(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Matches = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Matches = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Matches = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Matches = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Matches = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Matches = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Matches = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Matches = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Matches = where(DSL.notExists(select))
}
