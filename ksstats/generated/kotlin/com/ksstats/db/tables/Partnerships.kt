/*
 * This file is generated by jOOQ.
 */
package com.ksstats.db.tables


import com.ksstats.db.DefaultSchema
import com.ksstats.db.indexes.PARTNERSHIPS_INNINGS
import com.ksstats.db.indexes.PARTNERSHIPS_MATCHTYPE
import com.ksstats.db.indexes.PARTNERSHIPS_OPPONENTSID
import com.ksstats.db.indexes.PARTNERSHIPS_PLAYERIDS
import com.ksstats.db.indexes.PARTNERSHIPS_TEAMID
import com.ksstats.db.indexes.PARTNERSHIPS_UNBROKEN
import com.ksstats.db.indexes.PARTNERSHIPS_WICKET
import com.ksstats.db.keys.PARTNERSHIPSPLAYERS__FK_PARTNERSHIPSPLAYERS_PK_PARTNERSHIPS
import com.ksstats.db.keys.PARTNERSHIPS__FK_PARTNERSHIPS_PK_MATCHES
import com.ksstats.db.keys.PARTNERSHIPS__FK_PARTNERSHIPS_PK_TEAMS
import com.ksstats.db.keys.PARTNERSHIPS__PK_PARTNERSHIPS
import com.ksstats.db.tables.Matches.MatchesPath
import com.ksstats.db.tables.Partnershipsplayers.PartnershipsplayersPath
import com.ksstats.db.tables.Teams.TeamsPath
import com.ksstats.db.tables.records.PartnershipsRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Partnerships(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PartnershipsRecord>?,
    parentPath: InverseForeignKey<out Record, PartnershipsRecord>?,
    aliased: Table<PartnershipsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PartnershipsRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>Partnerships</code>
         */
        val PARTNERSHIPS: Partnerships = Partnerships()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PartnershipsRecord> = PartnershipsRecord::class.java

    /**
     * The column <code>Partnerships.Id</code>.
     */
    val ID: TableField<PartnershipsRecord, Int?> = createField(DSL.name("Id"), SQLDataType.INTEGER.identity(true), this, "")

    /**
     * The column <code>Partnerships.MatchId</code>.
     */
    val MATCHID: TableField<PartnershipsRecord, Int?> = createField(DSL.name("MatchId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>Partnerships.MatchType</code>.
     */
    val MATCHTYPE: TableField<PartnershipsRecord, String?> = createField(DSL.name("MatchType"), SQLDataType.VARCHAR(5).nullable(false), this, "")

    /**
     * The column <code>Partnerships.TeamId</code>.
     */
    val TEAMID: TableField<PartnershipsRecord, Int?> = createField(DSL.name("TeamId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>Partnerships.OpponentsId</code>.
     */
    val OPPONENTSID: TableField<PartnershipsRecord, Int?> = createField(DSL.name("OpponentsId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>Partnerships.Innings</code>.
     */
    val INNINGS: TableField<PartnershipsRecord, Int?> = createField(DSL.name("Innings"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>Partnerships.InningsOrder</code>.
     */
    val INNINGSORDER: TableField<PartnershipsRecord, Int?> = createField(DSL.name("InningsOrder"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>Partnerships.Wicket</code>.
     */
    val WICKET: TableField<PartnershipsRecord, Int?> = createField(DSL.name("Wicket"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>Partnerships.Partnership</code>.
     */
    val PARTNERSHIP: TableField<PartnershipsRecord, Int?> = createField(DSL.name("Partnership"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>Partnerships.PreviousWicket</code>.
     */
    val PREVIOUSWICKET: TableField<PartnershipsRecord, Int?> = createField(DSL.name("PreviousWicket"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>Partnerships.PreviousScore</code>.
     */
    val PREVIOUSSCORE: TableField<PartnershipsRecord, Int?> = createField(DSL.name("PreviousScore"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>Partnerships.PlayerIds</code>.
     */
    val PLAYERIDS: TableField<PartnershipsRecord, String?> = createField(DSL.name("PlayerIds"), SQLDataType.VARCHAR(120).nullable(false), this, "")

    /**
     * The column <code>Partnerships.PlayerNames</code>.
     */
    val PLAYERNAMES: TableField<PartnershipsRecord, String?> = createField(DSL.name("PlayerNames"), SQLDataType.VARCHAR(400).nullable(false), this, "")

    /**
     * The column <code>Partnerships.CurrentScore</code>.
     */
    val CURRENTSCORE: TableField<PartnershipsRecord, Int?> = createField(DSL.name("CurrentScore"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>Partnerships.Fifty</code>.
     */
    val FIFTY: TableField<PartnershipsRecord, Boolean?> = createField(DSL.name("Fifty"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>Partnerships.Hundred</code>.
     */
    val HUNDRED: TableField<PartnershipsRecord, Boolean?> = createField(DSL.name("Hundred"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>Partnerships.Unbroken</code>.
     */
    val UNBROKEN: TableField<PartnershipsRecord, Int?> = createField(DSL.name("Unbroken"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>Partnerships.Multiple</code>.
     */
    val MULTIPLE: TableField<PartnershipsRecord, Boolean?> = createField(DSL.name("Multiple"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>Partnerships.Partial</code>.
     */
    val PARTIAL: TableField<PartnershipsRecord, Boolean?> = createField(DSL.name("Partial"), SQLDataType.BOOLEAN.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<PartnershipsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PartnershipsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PartnershipsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>Partnerships</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>Partnerships</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>Partnerships</code> table reference
     */
    constructor(): this(DSL.name("Partnerships"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, PartnershipsRecord>?, parentPath: InverseForeignKey<out Record, PartnershipsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, PARTNERSHIPS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class PartnershipsPath : Partnerships, Path<PartnershipsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, PartnershipsRecord>?, parentPath: InverseForeignKey<out Record, PartnershipsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<PartnershipsRecord>): super(alias, aliased)
        override fun `as`(alias: String): PartnershipsPath = PartnershipsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): PartnershipsPath = PartnershipsPath(alias, this)
        override fun `as`(alias: Table<*>): PartnershipsPath = PartnershipsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(PARTNERSHIPS_INNINGS, PARTNERSHIPS_MATCHTYPE, PARTNERSHIPS_OPPONENTSID, PARTNERSHIPS_PLAYERIDS, PARTNERSHIPS_TEAMID, PARTNERSHIPS_UNBROKEN, PARTNERSHIPS_WICKET)
    override fun getIdentity(): Identity<PartnershipsRecord, Int?> = super.getIdentity() as Identity<PartnershipsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<PartnershipsRecord> = PARTNERSHIPS__PK_PARTNERSHIPS
    override fun getReferences(): List<ForeignKey<PartnershipsRecord, *>> = listOf(PARTNERSHIPS__FK_PARTNERSHIPS_PK_MATCHES, PARTNERSHIPS__FK_PARTNERSHIPS_PK_TEAMS)

    private lateinit var _matches: MatchesPath

    /**
     * Get the implicit join path to the <code>Matches</code> table.
     */
    fun matches(): MatchesPath {
        if (!this::_matches.isInitialized)
            _matches = MatchesPath(this, PARTNERSHIPS__FK_PARTNERSHIPS_PK_MATCHES, null)

        return _matches;
    }

    val matches: MatchesPath
        get(): MatchesPath = matches()

    private lateinit var _teams: TeamsPath

    /**
     * Get the implicit join path to the <code>Teams</code> table.
     */
    fun teams(): TeamsPath {
        if (!this::_teams.isInitialized)
            _teams = TeamsPath(this, PARTNERSHIPS__FK_PARTNERSHIPS_PK_TEAMS, null)

        return _teams;
    }

    val teams: TeamsPath
        get(): TeamsPath = teams()

    private lateinit var _partnershipsplayers: PartnershipsplayersPath

    /**
     * Get the implicit to-many join path to the
     * <code>PartnershipsPlayers</code> table
     */
    fun partnershipsplayers(): PartnershipsplayersPath {
        if (!this::_partnershipsplayers.isInitialized)
            _partnershipsplayers = PartnershipsplayersPath(this, null, PARTNERSHIPSPLAYERS__FK_PARTNERSHIPSPLAYERS_PK_PARTNERSHIPS.inverseKey)

        return _partnershipsplayers;
    }

    val partnershipsplayers: PartnershipsplayersPath
        get(): PartnershipsplayersPath = partnershipsplayers()
    override fun `as`(alias: String): Partnerships = Partnerships(DSL.name(alias), this)
    override fun `as`(alias: Name): Partnerships = Partnerships(alias, this)
    override fun `as`(alias: Table<*>): Partnerships = Partnerships(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Partnerships = Partnerships(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Partnerships = Partnerships(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Partnerships = Partnerships(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Partnerships = Partnerships(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Partnerships = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Partnerships = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Partnerships = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Partnerships = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Partnerships = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Partnerships = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Partnerships = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Partnerships = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Partnerships = where(DSL.notExists(select))
}
